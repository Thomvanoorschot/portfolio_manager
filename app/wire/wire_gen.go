// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/Thomvanoorschot/portfolioManager/app/data/repositories"
	"github.com/Thomvanoorschot/portfolioManager/app/handlers/graph_data_handlers"
	"github.com/Thomvanoorschot/portfolioManager/app/handlers/import_handlers"
	"github.com/Thomvanoorschot/portfolioManager/app/handlers/transaction_handlers"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

// Injectors from graph_data_wire.go:

func InitializeCashDepositsHandler(postgresClient *gorm.DB, redisClient *redis.Client) *graph_data_handlers.CashDeposits {
	transactionRepository := repositories.NewTransactionRepository(postgresClient)
	cashDeposits := graph_data_handlers.NewCashDeposits(transactionRepository)
	return cashDeposits
}

func InitializeTotalHoldingsPerDayHandler(postgresClient *gorm.DB, redisClient *redis.Client) *graph_data_handlers.TotalHoldingsPerDay {
	transactionRepository := repositories.NewTransactionRepository(postgresClient)
	historicalDataRepository := repositories.NewHistoricalDataRepository(redisClient)
	allocationRepository := repositories.NewAllocationRepository(redisClient)
	totalHoldingsPerDay := graph_data_handlers.NewTotalHoldingsPerDay(transactionRepository, historicalDataRepository, allocationRepository)
	return totalHoldingsPerDay
}

func InitializePercentageAllocationsHandler(postgresClient *gorm.DB, redisClient *redis.Client) *graph_data_handlers.PercentageAllocations {
	allocationRepository := repositories.NewAllocationRepository(redisClient)
	percentageAllocations := graph_data_handlers.NewPercentageAllocations(allocationRepository)
	return percentageAllocations
}

func InitializeTradesHandler(postgresClient *gorm.DB, redisClient *redis.Client) *graph_data_handlers.Trades {
	historicalDataRepository := repositories.NewHistoricalDataRepository(redisClient)
	transactionRepository := repositories.NewTransactionRepository(postgresClient)
	trades := graph_data_handlers.NewTrades(historicalDataRepository, transactionRepository)
	return trades
}

// Injectors from import_wire.go:

func InitializeDegiroImportHandler(postgresClient *gorm.DB) *import_handlers.DegiroImport {
	portfolioRepository := repositories.NewPortfolioRepository(postgresClient)
	transactionRepository := repositories.NewTransactionRepository(postgresClient)
	degiroImport := import_handlers.NewDegiroImport(portfolioRepository, transactionRepository)
	return degiroImport
}

func InitializeHistoricalDataImportHandler(postgresClient *gorm.DB, redisClient *redis.Client) *import_handlers.HistoricalDataImport {
	transactionRepository := repositories.NewTransactionRepository(postgresClient)
	historicalDataRepository := repositories.NewHistoricalDataRepository(redisClient)
	historicalDataImport := import_handlers.NewHistoricalDataImport(transactionRepository, historicalDataRepository)
	return historicalDataImport
}

// Injectors from transaction_wire.go:

func InitializeGetByPortfolioIdHandler(postgresClient *gorm.DB) *transaction_handlers.GetByPortfolioId {
	transactionRepository := repositories.NewTransactionRepository(postgresClient)
	getByPortfolioId := transaction_handlers.NewGetByPortfolioId(transactionRepository)
	return getByPortfolioId
}

func InitializeUpdateHandler(postgresClient *gorm.DB) *transaction_handlers.Update {
	transactionRepository := repositories.NewTransactionRepository(postgresClient)
	update := transaction_handlers.NewUpdate(transactionRepository)
	return update
}

func InitializeUpdateTransactionSymbolsHandler(postgresClient *gorm.DB) *transaction_handlers.UpdateTransactionSymbols {
	transactionRepository := repositories.NewTransactionRepository(postgresClient)
	updateTransactionSymbols := transaction_handlers.NewUpdateTransactionSymbols(transactionRepository)
	return updateTransactionSymbols
}
